//require.paths.push(__dirname);
require('MooTools').apply(GLOBAL);
var GLOBAL_ITEMS = function(){
	var items = [];
	for(var key in this) items.push(key);
	return items;
}();

(function(){
    this.APIError = new Class({
        initialize : function(options, emitter){
            if(typeOf(options) == 'string') options = {message:options};
            var callback;
            if(typeOf(emitter) == 'function'){
                callback = emitter;
                delete emitter;
            }
            if(!options.response && Error.response) options.response = Error.response; //go with global
            if(!options.response && global.response) options.response = global.response;
            Logger.log(options.message, 'Error');
            if(callback) callback();
            else if(options.response){
                var response = {};
                if(options.code){
                    if(options.code == 'not_modified') options.code = 304;
                    if(options.code == 'bad_request') options.code = 400;
                    if(options.code == 'unauthorized') options.code = 401;
                    if(options.code == 'forbidden') options.code = 403;
                    if(options.code == 'not_found') options.code = 404;
                    if(options.code == 'not_acceptable') options.code = 406;
                    if(options.code == 'rate_limited') options.code = 420;
                    if(options.code == 'internal_server_error') options.code = 500;
                    if(options.code == 'bad_gateway') options.code = 502;
                    if(options.code == 'service_unavailable') options.code = 503;
                    response.code = options.code;
                }
                if(!options.code) options.code = 503;
                response.status = 'error';
                if(options.message) response.message = options.message
                options.response.writeHead(options.code );
                options.response.end(JSON.encode(response));
            }else console.log('no callback, no response');
        }
    });
    this.APIError.response = null;
})();

if (typeof exports != 'undefined') (function(){
    for (var key in this) if (!GLOBAL_ITEMS.contains(key)){
        exports[key] = this[key];
    }
    exports.apply = function(object){
        Object.append(object, exports);
    };
})();

