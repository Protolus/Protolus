//require.paths.push(__dirname);
require('MooTools').apply(GLOBAL);
require('Requests').apply(GLOBAL);
require('Midas.node').apply(GLOBAL);
require('Code').apply(GLOBAL);
GLOBAL.System = require('util');
GLOBAL.System.request = require('request');
GLOBAL.System.file = require('fs');
GLOBAL.System.url = require('url');
GLOBAL.System.uuid = require('node-uuid');
GLOBAL.System.querystring = require('querystring');
GLOBAL.System.dateFormat = require('dateformat');

var GLOBAL_ITEMS = function(){
	var items = [];
	for(var key in this) items.push(key);
	return items;
}();

(function(){
    this.Protolus = {
        resources : false,
        resourceDirectory : '',
        configurationDirectory : '',
        classDirectory : '',
        appName : 'Protolus',
        appVersion : 'a1',
        appMode : 'production',
        appPort : 9876789,
        isNode : false,
        bootstrap : function(options){
            if(options.console) Protolus.consoleOutput();
            if (typeof module !== 'undefined' && module.exports){
                Protolus.isNode = true;
                Protolus.loadClass('Protolus', Protolus.resourceDirectory);
                Protolus.loadClass('Protolus.Registry', Protolus.resourceDirectory);
                Protolus.loadClass('Protolus.Resource', Protolus.resourceDirectory);
            }else{
                //clientside bootstrap
            }
        },
        consoleOutput : function(){
            require('AsciiArt').apply(GLOBAL);
            function ansiBox(text, color, boxColor, width){
                var halfwidth = (width-text.length-1)/2;
                var lpad = (halfwidth < 0)?'':Array(Math.floor(halfwidth)+1).join(" ");
                var rpad = (halfwidth < 0)?'':Array(Math.ceil(halfwidth)+1).join(" ");
                var message = AsciiArt.ansiCodes(text, color);
                return AsciiArt.ansiCodes('[', boxColor)+lpad+message+rpad+AsciiArt.ansiCodes(']', boxColor);
            }
            AsciiArt.font(Protolus.appName, 'Fonts/Doom', function(text){
                text.split('\n').each(function(line){
                    console.log(AsciiArt.ansiCodes(line, 'red'));
                });
                var status = ansiBox(' v.'+Protolus.appVersion, 'white', 'red', 15);
                status += ansiBox(Protolus.appMode+' mode', 'white', 'red', 20);
                //status += ansiBox(foundDatasources.join(', '), 'blue', 'yellow', 40);
                console.log(status);
            });
        },
        loadClass : function(name, path){
            var body = System.file.readFileSync((path || Protolus.classDirectory)+'/'+name+'.js', 'utf8');
            if(path) eval.apply(GLOBAL, [body]);
            else{
                if(!Data) throw('class loading requires the \'Data\' resource!');
                eval.apply(GLOBAL, ['var '+name+' = '+body]);
                eval.apply(GLOBAL, ['var protolus_data_dummy = new '+name+'();']);
                eval.apply(GLOBAL, ['Data.dummies[\''+name+'\'] = protolus_data_dummy;']);
                eval.apply(GLOBAL, [name+'.allfields = [\''+protolus_data_dummy.fields.combine(Data.coreFields).join("','")+'\'];'+name+'.fields = [\''+protolus_data_dummy.fields.join("','")+'\']; delete protolus_data_dummy;']);
            }
        },
        addEvent : function(type, callback){
            switch(type){
                case 'web':
                    if(!Protolus.http) Protolus.http = require('http');
                    Protolus.http.createServer(callback).listen(Protolus.appPort);
                    break;
                case 'socket':
                    Protolus.socketIO = require('socket.io').listen(app);
                    Protolus.socketIO.set('log level', 1);
                    Protolus.socketIO.sockets.on('connection', callback);
                    break;
            }
        }
    };
})();

if (typeof exports != 'undefined') (function(){
    for (var key in this) if (!GLOBAL_ITEMS.contains(key)){
        exports[key] = this[key];
    }
    exports.apply = function(object){
        Object.append(object, exports);
    };
})();

