//require.paths.push(__dirname);
require('MooTools').apply(GLOBAL);
var System = require('util');
System.request = require('request');
System.file = require('fs');
var GLOBAL_ITEMS = function(){
	var items = [];
	for(var key in this) items.push(key);
	return items;
}();

(function(){
    if(!JSON.encode && JSON.stringify) JSON.encode = JSON.stringify;
    if(!JSON.decode && JSON.parse) JSON.decode = JSON.parse;
    this.Request = new Class({
        slave : null,
        options : {
            url : '',
            method : 'GET',
            data : {},
            evalScripts : false,
            evalResponse : false,
            timeout : false,
            noCache : false,
            user : false,
            password : false,
            onRequest : false,
            onLoadStart : false,
            onProgress : false,
            onComplete : false,
            onCancel : false,
            onSuccess : false,
            onFailure : false,
            onException : false
        },
        initialize : function(options){
            Object.each(options, function(value, index){
                this.options[index] = value;
            }.bind(this));
        },
        send : function(args){
            if(this.options.onRequest) this.options.onRequest(onRequest);
            if(this.options.onLoadStart) this.options.onLoadStart(onLoadStart);
            if(!args) args = {};
            //TODO: WTF to do about progress?
            //console.log(['options', this.options]);
            var body = '';
            Object.each(args, function(arg, key){
                body += key+'='+arg+'\n';
            });
            if(this.options.url.indexOf('://') != -1){
                //url read
                System.request({
                    uri: this.options.url,
                    method : this.options.method?this.options.method:'get',
                    body : body,
                }, function (error, response, bodyText) {
                    if(this.cancelled) return;
                    if(error){
                        //todo: create error object here
                        if(this.options.onFailure) this.options.onFailure(error);
                    }else{
                        if(this.options.onSuccess) this.success(bodyText);
                    }
                    if(this.options.onComplete) this.options.onComplete(bodyText);
                }.bind(this));
            }else{
                //local read
                System.file.readFile(this.options.url, 'utf8', function (err, data) {
                    if (err){
                        if(this.options.onFailure) this.options.onFailure(err);
                    }
                    if(this.options.onSuccess) this.success(data);
                    if(this.options.onComplete) this.options.onComplete(data);
                }.bind(this));
            }
        },
        success: function(text){
            if(this.options.onSuccess) this.options.onSuccess(text);
        },
        getHeader : function(){},
        setHeader : function(){},
        cancel : function(){
            //this.slave.
            this.cancelled = true;
        },
    });
    
    this.Request.JSON = new Class({
        Extends : Request,
        success: function(text){
            if(this.options.onSuccess) this.options.onSuccess(JSON.decode(text), text);
        }
    });
})();

if (typeof exports != 'undefined') (function(){
    for (var key in this) if (!GLOBAL_ITEMS.contains(key)){
        exports[key] = this[key];
    }
    exports.apply = function(object){
        Object.append(object, exports);
    };
})();

